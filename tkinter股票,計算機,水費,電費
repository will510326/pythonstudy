# -*- coding: utf-8 -*-
"""
Created on Sun Dec  5 14:33:53 2021

@author: will5
"""
import tkinter as tk
import csv
import pandas_datareader as pdr
import matplotlib.pyplot as plt
from pandastable import Table
from PIL import ImageTk,Image
import sqlite3
import time
import pandas as pd
win = tk.Tk()
win.title('查詢登入介面')
# 帳號登入與註冊
def _btn2():
    def btn2_register():
        var1 = entry3.get()
        var2 = entry4.get()
        # 將註冊好的帳號以及密碼給csv
        with open ('Account management.csv', 'a+', encoding = 'utf-8-sig', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([var1 , var2])
            label5.config(text = '寫入成功',fg = 'blue')
    #帳號註冊介面
    root = tk.Tk()
    root.title('帳號註冊介面')
    f1_root = tk.Frame(root)
    f1_root.pack()
    f2_root = tk.Frame(root)
    f2_root.pack()
    
    label3 = tk.Label(f1_root , text = '請輸入註冊帳號:')
    label3.grid(row = 0, column= 0)
    entry3 = tk.Entry(f1_root)
    entry3.grid(row = 0, column= 1)
    
    label4 = tk.Label(f1_root , text = '請輸入註冊密碼:')
    label4.grid(row = 1, column= 0)
    entry4 = tk.Entry(f1_root, show = '*')
    entry4.grid(row = 1, column= 1)


    #使用lambda將參數傳給btn2_register
    btn3 = tk.Button(f2_root, text = '註冊', command =lambda: btn2_register())
    btn3.grid(row = 2, column = 0)
    root.mainloop()

#帳號密碼輸入後執行判斷
def btn1_enter():
    with open ('Account management.csv') as f:
        datas = list(csv.reader(f))
        for data in datas:
            result = False
            if entry1.get() == data[0] and entry2.get() == data[1]:
                result = True
                break
        #判斷登入成功後執行接下來的程式
        if result == True:
            tk.messagebox.showinfo(title = '資訊', message = '登入成功')
            window = tk.Tk()
            window.title('My Window')
            window.geometry('500x300') 

            var = tk.StringVar()
            l = tk.Label(window, bg='yellow', width=20, text='empty')
            l.pack()
             
            # 股票查詢系統
            def print_stockdatas():
                def btn_load_datas():
                    try:
                        global datas
                        var6 = entry6.get()
                        start, end = entry7.get().split(',')
                        datas = pdr.DataReader(var6+'.tw', 'yahoo', start, end)
                        datas['return'] = (datas['Adj Close'].shift()-datas['Adj Close'])/datas['Adj Close']
                        tk.messagebox.showinfo(title='success',message='讀取完成')
                        pt = Table(f_stock2, dataframe=datas,showtoolbar=True, showstatusbar=True)
                        pt.show()
                    except Exception as e:
                        tk.messagebox.showinfo(title='error',message=e)
                #波動圖
                def draw():
                    global datas
                    draw_window = tk.Toplevel()
                    draw_window.title('波動圖')
                    datas['return'].plot(figsize = (12, 6))
                    plt.savefig('./stock.jpg')
                    plt.show()
                    img = ImageTk.PhotoImage(Image.open('./stock.jpg'))            
                    panel = tk.Label(draw_window, image = img)
                    panel.pack(anchor='center')
                    draw_window.mainloop() 
                def draw_1():
                    global datas
                    draw1_win = tk.Toplevel()
                    draw1_win.title('柱狀圖')
                    datas.resample('AS').sum()['return'].plot(figsize = (12, 6), kind = 'bar')
                    plt.savefig('./stock2.jpg')
                    plt.show()
                    img = ImageTk.PhotoImage(Image.open('./stock2.jpg'))            
                    panel = tk.Label(draw1_win, image = img)
                    panel.pack(anchor='center')
                    draw1_win.mainloop()
                def close():
                    test1.destroy()
                def store():
                    global datas
                    datas.to_csv('stock.csv')
                test1 = tk.Toplevel()
                test1.title('股票查詢系統')
                f_stock0 = tk.Frame(test1)
                f_stock0.pack()
                f_stock1 = tk.Frame(test1)
                f_stock1.pack(fill = 'x')
                f_stock2 = tk.Frame(test1)
                f_stock2.pack()
                f_stock3 = tk.Frame(test1)
                f_stock3.pack()
                
                img5 = Image.open('./piture/stock.jpg')
                img5 = img5.resize((img5.width // 2, img5.height // 2))
                imgTK = ImageTk.PhotoImage(img5)
                labelp = tk.Label(f_stock0, image = imgTK)
                labelp.image = imgTK
                labelp.grid(row = 0, column = 0, rowspan = 2, columnspan = 2)
                
                label6 = tk.Label(f_stock1, text = '股票代號：', font = ('標楷體', 15))
                label6.grid(row = 0, column = 2)
                entry6 = tk.Entry(f_stock1)
                entry6.grid(row = 0, column = 3)
                label7 = tk.Label(f_stock1, text = '起始年分：,終止年分：', font = ('標楷體', 15))
                label7.grid(row = 1, column = 2)
                entry7 = tk.Entry(f_stock1)
                entry7.grid(row = 1, column = 3)
                entry7.insert('end','2000,2022')
                
                btn_text = ['查詢', '波動圖', '柱狀圖', '儲存', '離開']
                btn_lambda = ['btn_load_datas', 'draw', 'draw_1', 'store', 'close']
                
                for index, value in enumerate(btn_text):
                    btn = tk.Button(f_stock3, text = value, width = 20, font = ('標楷體', 15), \
                                    command = eval(btn_lambda[index]))
                    btn.grid(padx = 5, pady = 5, row = index // 3, column= index % 3)
                

                test1.mainloop()
            #計算機運算
            def print_compete():
                win=tk.Tk()

                win.title('計算機')
                frame1=tk.Frame(win)
                frame1.pack(fill='x')
                frame2=tk.Frame(win)
                frame2.pack()
                
                #建立上方的frame
                entry=tk.Entry(frame1,bg='lightpink',fg='black',font=('標楷體',20),borderwidth=3)
                entry.pack(fill='x')
                label=tk.Label(frame1,text='計算結果',bg='black',fg='yellow',font=('Arial',16)
                ,anchor='e')
                label.pack(fill='x')
                
                
                button_text='1,2,3,+,4,5,6,-,7,8,9,*,0,cls,=,/,b'
                
                button_text=button_text.split(',')
                
                
                def click(value):
                    entry.insert('end',value)  
                
                def clear():
                    entry.delete(0,'end')
                    
                def answer():
                    try:
                        input_value=entry.get()
                        output_value=eval(input_value)
                        label.config(text=output_value)
                    except ZeroDivisionError:
                        label.config(text='ZeroDivisionError')
                    except:
                        label.config(text='算式有誤')
                    clear()
                
                def back():
                    entry.delete(len(entry.get())-1,'end')
                
                for index, value in enumerate(button_text):       
                    #clear
                    if value == 'cls':
                        button=tk.Button(frame2,text=value,width=10,command=clear)
                    elif value== '=':
                         button=tk.Button(frame2,text= value,width=10,command=answer)
                    elif value == 'b':
                        button = tk.Button(frame2,text= value,width=10,command=back)
                    else:
                        button=tk.Button(frame2,text=value,width=10,
                                         command=lambda value=value:click(value))
                    button.grid(padx=5,pady=5,row=index//4,column=index%4)
                    
                    
                    
                win.mainloop()
            # 電費計算系統
            def print_electricity_bill():
                test2 = tk.Toplevel()
                test2.title('電費計算系統')
                def updata():
                    global el
                    el = eval(entry8.get())
                    sqlstr = f'insert into bill(el) values ({el})'
                    cur.execute(sqlstr)
                    conn.commit()
                    label12.config(text = '資料已寫入', fg = 'green')
                def opensql():
                    global conn
                    global cur
                    try:
                        with sqlite3.connect('electricity.db') as conn:
                            cur = conn.cursor()
                            label12.config(text = '資料庫已連結',fg = 'green')
                    except Exception as e:
                        tk.messagebox.showinfo(title='error',message=e)
                    else:
                        cur.execute(table_str)
                        conn.commit()
                def bill():
                    global conn
                    global cur
                    global el
                    var10 = var7.get()# 可以得知是否夏季與非夏季
                    if var10 == 'not summer':
                        if el <= 120:
                            x = el * 1.63
                            var4.set(x)
                        elif el <= 660:
                            x = 240 * 1.63 + (el-240) * 2.1
                            var4.set(x)
                        elif el <= 1000:
                            x = 240 * 1.63 + 420 * 2.1 + (el-660) * 2.89
                            var4.set(x)
                        elif el <= 1400:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + (el - 1000) * 3.94
                            var4.set(x)
                        elif el <= 2000:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + 1000 * 3.94 + (el - 1400) * 4.6
                            var4.set(x)
                        else:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + 1000 * 3.94 + 1400 * 4.6 + (el - 2000) * 5.03
                            var4.set(x)
                        y = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
                        sqlstr = f'update bill set how_money={x}, time = "{y}" where el = {el}'
                        cur.execute(sqlstr)
                        conn.commit()
                    else:
                        if el <= 120:
                            x = el * 1.63
                            var4.set(x)
                        elif el <= 660:
                            x = 240 * 1.63 + (el-240) * 2.38
                            var4.set(x)
                        elif el <= 1000:
                            x = 240 * 1.63 + 420 * 2.1 + (el-660) * 3.52
                            var4.set(x)
                        elif el <= 1400:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + (el - 1000) * 4.8
                            var4.set(x)
                        elif el <= 2000:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + 1000 * 3.94 + (el - 1400) * 5.66
                            var4.set(x)
                        else:
                            x = 240 * 1.63 + 420 * 2.1 + 340 * 2.89 + 1000 * 3.94 + 1400 * 4.6 + (el - 2000) * 6.41
                            var4.set(x)
                        y = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
                        sqlstr = f'update bill set how_money={x}, time = "{y}" where el = {el}'
                        cur.execute(sqlstr)
                        conn.commit()
                def opendata():
                    tk.messagebox.showinfo(title = '開發人員',\
                                           message = '建立日期:2021/12/07\n auther:Wayne')
                
                def close():
                    test2.destroy()
                
                f4_1 = tk.Frame(test2)
                f4_1.pack()
                f4 = tk.Frame(test2)
                f4.pack()
                f5 = tk.Frame(test2)
                f5.pack()
                f6 = tk.Frame(test2)
                f6.pack()
                f7 = tk.Frame(test2)
                f7.pack(fill = 'x')
                
                img6 = Image.open('./piture/el.jpg')
                img6 = img6.resize((img6.width // 2, img6.height // 2))
                imgTK = ImageTk.PhotoImage(img6)
                labelp = tk.Label(f4_1, image = imgTK)
                labelp.image = imgTK
                labelp.grid(row = 0, column = 0, rowspan = 2, columnspan = 2)
                
            
                font1 = ('標楷體', 15)
                font2 = ('標楷體', 10)
                
                label12 = tk.Label(f4, text = '資料庫狀態',bg = 'black', fg = 'red')
                label12.pack(fill = 'x')
                
                
                label8 = tk.Label(f5, text = '請輸入用電量:', font = font1)
                label8.grid(row = 0, column = 0)
                entry8 = tk.Entry(f5, justify = 'center')
                entry8.grid(row = 0, column= 1)
                
                
                
                label10 = tk.Label(f5, text = '請選擇當前是夏季還是非夏季:', font = font1)
                label10.grid(row = 2, column = 0)
                optionList = ['summer', 'not summer']
                var7 = tk.StringVar()
                var7.set(optionList[0])
                myopenmenu = tk.OptionMenu(f5, var7, *optionList)
                myopenmenu.grid(row = 2, column= 1)
                
                Button_text = ['開啟', '提交','電費','開發人員', '離開']
                Button_command = ['opensql', 'updata', 'bill', 'opendata', 'close']
                for index, value in enumerate(Button_text):
                    btn = tk.Button(f6, text = value, width = 20,font=('標楷體',20), \
                                    command = eval(Button_command[index]))
                    btn.grid(padx = 5,pady = 5,row = index // 3, column = index % 3)
                
                
                var4 = tk.StringVar()    
                label11 = tk.Label(f7, textvariable = var4, bg = '#ffebcd', fg = 'black',font = font1)
                label11.pack(fill = 'x')
                
                
                table_str = '''CREATE TABLE bill (
                        	ID	INTEGER,
                        	el	INTEGER,
                            how_money INTEGER,
                            time TEXT,
                        	PRIMARY KEY(ID AUTOINCREMENT)
                        );'''
                
                test2.mainloop()
            #水費計算系統
            def print_water_fee():
                test3 = tk.Toplevel()
                test3.title('水費查詢系統-一般住戶用水')
                f4_1 =tk.Frame(test3)
                f4_1.pack()
                f4 = tk.Frame(test3)
                f4.pack()
                f5 = tk.Frame(test3)
                f5.pack()
                f6 = tk.Frame(test3)
                f6.pack()
                def open_water():
                    global conn
                    global cur
                    try:
                        with sqlite3.connect('water_bill.db') as conn:
                            cur = conn.cursor()
                            labeltl.config(text = '資料庫已連結',fg = 'green')
                    except Exception as e:
                        tk.messagebox.showinfo(title='error',message=e)
                    else:
                        cur.execute(table_water)
                        conn.commit()
                def write():
                    global conn
                    global cur
                    var13_1 = eval(var13.get()) # 水表口徑
                    var14_1 = eval(entry14.get())# 實際度數
                    var15_2 = entry15.get()# 分攤度數
                    if var15_2 == '':
                        var15_2 = 0
                    else:
                        var15_2 = eval(var15_2)
                    var16_1 = var16.get()# 居住縣市
                    var17_3 = eval(var17.get())# 代徵水源保育與回饋費
                    y = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
                    sqlstr1 = f'insert into water(水表口徑, 實際度數, 分攤度數, 居住縣市,代徵水源保育與回饋費, datetime) values ({var13_1},{var14_1},{var15_2},"{var16_1}",{var17_3},"{y}");'
                    cur.execute(sqlstr1)
                    conn.commit()
                    labeltl.config(text = '資料儲存成功!!', fg = 'green')
                    
                def compete():
                    var14 = eval(entry14.get()) # 實際用度
                    var15 = entry15.get() # 分攤用度
                    if var15 == '':
                        var15 = 0
                    else:
                        var15 = eval(var15)
                    var16_2 = var16.get() # 居住縣市
                    live_bill = {'新北市': 0,'台中市': 3.7,'嘉義市':3.7,'台南市':3.7,'高雄市':4.1,
                                 '新竹市':3.7,'新竹縣':3.7,'苗栗縣':3.7,'雲林縣':2.9,'台東縣':4.1,
                                     '澎湖縣':2.9,'彰化縣':3.7,'基隆市':3.7,'嘉義縣':3.7,'屏東縣':4,
                                         '桃園市':3.7,'花蓮縣':3.5,'南投縣':3.7,'宜蘭縣':4.1}
                    if var16_2 in live_bill: 
                        bill = live_bill[var16_2]
                    for index,value in enumerate(water_long): # 水管口徑
                        if value == var13.get():
                            Basic_fee = long_money[index]
                            Basic_fee = eval(Basic_fee)
                    var17_1 = eval(var17.get()) # 代徵水源保育與回饋費
                    if var14+var15 <= 20:
                        use_water = (var14+var15)*7.35
                        price = use_water + Basic_fee*2 + var17_1/100 * use_water + var14 * bill
                    elif var14+var15 <= 60:
                        use_water = (var14+var15)*9.45-42
                        price = use_water + Basic_fee*2 + var17_1/100 * use_water + var14 * bill
                    elif var14+var15 <= 100:
                        use_water = (var14+var15)*11.55-168
                        price = use_water + Basic_fee*2 + var17_1/100 * use_water + var14 * bill
                    else:
                        use_water = (var14+var15)*12.075-220.5
                        price = use_water + Basic_fee*2 + var17_1/100 * use_water + var14 * bill
                    labelfooter.config(text = f'需繳交水費：{price}元',font = ('標楷體',15))
                def store():
                    global conn
                    global cur
                    sqlstr2 = 'select * from water;'
                    datas = pd.DataFrame(cur.execute(sqlstr2))
                    datas.to_csv('water_bill.csv',encoding = 'utf-8-sig')
                def exit_water():
                    test3.destroy()
                labeltl = tk.Label(f4, text = '資料庫狀態',font = ('標楷體',15),bg = '#fffff0')
                labeltl.pack()
                
                img4 = Image.open('./piture/water.png')
                img4 = img4.resize((img4.width // 2, img4.height // 2))
                imgTK = ImageTk.PhotoImage(img4)
                labelp = tk.Label(f4_1, image = imgTK)
                labelp.image = imgTK
                labelp.grid(row = 0, column = 0, rowspan = 2, columnspan = 2)

                water_long = ['13','20','25','40','50','75','100','150','200','250','300','350','400']
                long_money = '17.85,35.7,66.15,196.35,357,964,1910,5301,10532,18600,29185,41626.2,58119.6'
                long_money = long_money.split(',')
                label13 = tk.Label(f5, text = '水表口徑:',font = ('標楷體', 15))
                label13.grid(row = 1, column = 2)
                var13 = tk.StringVar()
                var13.set(water_long[0])
                watermenu = tk.OptionMenu(f5, var13, *water_long)
                watermenu.grid(row = 1, column= 3)
                
                
                
                label14 = tk.Label(f5, text = '實際用度:', width = 20,font = ('標楷體', 15))
                label14.grid(row = 2, column = 2)
                entry14 = tk.Entry(f5)
                entry14.grid(row = 2, column = 3)
                
                
                label15 = tk.Label(f5, text = '分攤用度:', width = 20,font = ('標楷體', 15))
                label15.grid(row = 3, column = 2)
                entry15 = tk.Entry(f5)
                entry15.grid(row = 3, column = 3)
                
                
                label16 = tk.Label(f5, text = '請選擇居住縣市:', width = 20,font = ('標楷體', 15))
                liveoptionList = ['新北市','台中市','嘉義市','台南市','高雄市','新竹市','新竹縣','苗栗縣'\
                                  ,'雲林縣','台東縣','澎湖縣','彰化縣','基隆市','嘉義縣','屏東縣','桃園市'\
                                      ,'花蓮縣','南投縣','宜蘭縣']
                label16.grid(row = 4, column = 2)
                var16 = tk.StringVar()
                var16.set('請選擇')
                livemenu = tk.OptionMenu(f5,var16,*liveoptionList)
                livemenu.grid(row = 4, column = 3)
                
                label17 = tk.Label(f5, text = '代徵水源保育與回饋費:', width = 20,font = ('標楷體', 15))
                label17.grid(row = 5, column = 2)
                optionList = ['0', '5']
                var17 = tk.StringVar()
                var17.set(optionList[0])
                watermenu = tk.OptionMenu(f5, var17, *optionList)
                watermenu.grid(row = 5, column= 3)
                
                
                btn_water_command = ['open_water', 'compete', 'write', 'store', 'exit_water']
                btn_water_text = ['開啟', '計算', '寫入', '儲存', '離開']
                for index, value in enumerate(btn_water_text):
                    btn4 = tk.Button(f6, text = value, width = 20,font=('標楷體',20), \
                                     command = eval(btn_water_command[index]))
                    btn4.grid(padx = 5, pady = 5, row = index //3, column = index % 3)
                table_water = '''CREATE TABLE water (
                	ID	INTEGER,
                    水表口徑 INTEGER NOT NULL,
                	實際度數	INTEGER NOT NULL,
                	分攤度數	INTEGER,
                    居住縣市 TEXT,
                    代徵水源保育與回饋費 INTEGER,
                    datetime TEXT,
                	PRIMARY KEY(ID AUTOINCREMENT)
                );'''
                f7 = tk.Frame(test3)
                f7.pack()
                labelfooter = tk.Label(f7)
                labelfooter.pack()
    
    
                test3.mainloop()
            r1 = tk.Radiobutton(window, text='股票查詢系統', variable=var, value='A',\
                                command=print_stockdatas)
            r1.pack()
            r2 = tk.Radiobutton(window, text='計算機系統', variable=var, value='B',\
                                command = print_compete)
            r2.pack()
            r3 = tk.Radiobutton(window, text='電費計算系統', variable=var, value='C',\
                                command = print_electricity_bill)
            r3.pack()
            r4 = tk.Radiobutton(window, text='水費計算系統', variable=var, value='D',\
                                command = print_water_fee)
            r4.pack()

            window.mainloop()
        else:
            tk.messagebox.showinfo(title = '資訊', message = '登入失敗')

conn = None
cur = None
el = None
datas = None
# 登入介面
f0 = tk.Frame(win)
f0.pack()
f1 = tk.Frame(win)
f1.pack()
f2 = tk.Frame(win)
f2.pack()
f3 = tk.Frame(win)
f3.pack()




label5 = tk.Label(f1 , text = '運作資訊',font=('標楷體',20))
label5.pack()

img1 = Image.open('./piture/cat1.jpg')
img1 = img1.resize((img1.width // 2, img1.height // 2))
imgTK = ImageTk.PhotoImage(img1)
labelp = tk.Label(f2, image = imgTK)
labelp.image = imgTK
labelp.grid(row = 0, column = 0, rowspan = 2, columnspan = 2)

label1 = tk.Label(f2 , text = '帳號:',width = 20,font=('標楷體',15))
label1.grid(row = 0, column= 2)
entry1 = tk.Entry(f2)
entry1.grid(padx = 5, pady = 5, row = 0, column= 3)



label2 = tk.Label(f2 , text = '密碼:',width = 20,font=('標楷體',15))
label2.grid(row = 1, column= 2)
entry2 = tk.Entry(f2, show = '*')
entry2.grid(padx = 5, pady = 5, row = 1, column= 3)


btn1 = tk.Button(f3, text = '登入', command = btn1_enter,width = 20,font=('標楷體',20))
btn1.grid(padx = 5, pady = 5, row = 2, column = 2)

btn2 = tk.Button(f3, text = '註冊', command = _btn2,width = 20,font=('標楷體',20))
btn2.grid(padx = 5, pady = 5, row = 2, column = 3)



win.mainloop()
